import streamlit as st
import requests
import re
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import io
from contextlib import redirect_stdout

# API configuration
API_KEY = 'iehZbjKd.RYGEwTueidEBGbBDnCkdFTkuuyEd6BuM'
URL = 'https://payload.vextapp.com/hook/YMRS031J4J/catch/USER1'
HEADERS = {"Content-Type": "application/json", "Apikey": f"Api-Key {API_KEY}"}

# Streamlit App
st.title("Titanic Query Interface")
st.subheader("Ask a question about the Titanic dataset")

# User Input
user_query = st.text_input("Enter your question:", placeholder="e.g., What is the distribution of male and female survivors?")

# Submit Button
if st.button("Submit"):
    if user_query.strip():
        # Prepare payload
        data = {"payload": user_query}

        try:
            # Send POST request to the API
            response = requests.post(URL, headers=HEADERS, json=data)

            # Check response status
            if response.status_code == 200:
                # Parse the JSON response
                response_json = response.json()

                # Extract the text response
                response_text = response_json.get("text", "No text available in response.")
                st.success("Response:")
                st.write(response_text)

                # Check if the response contains Python code
                if "```" in response_text:
                    # Extract the code block
                    code_match = re.search(r"```(.*?)```", response_text, re.DOTALL)
                    
                    if code_match:
                        plotting_code = code_match.group(1).strip()
                        # Display the code snippet
                        # st.code(plotting_code, language="python")

                        # Shared namespace for exec
                        shared_namespace = {
                            "plt": plt,
                            "sns": sns,
                            "pd": pd,
                            "io": io,
                        }
                    
                        # Redirect stdout to capture print statements
                        output_buffer = io.StringIO()
                        try:
                            with redirect_stdout(output_buffer):
                                # Execute the code block
                                exec(plotting_code, shared_namespace)
                                # Capture and display stdout
                                output_text = output_buffer.getvalue()
                                if output_text:
                                    st.text("Code Output:")
                                    st.text(output_text)

                                # Display any generated plots
                                if plt.get_fignums():
                                    st.write("Executing plot")
                                    st.pyplot(plt.gcf())
                                    plt.close('all')  # Clear current figure
                                else:
                                    st.info("No plots generated by the code.")

                        except Exception as e:
                            st.error("Error while executing the code:")
                            st.text(str(e))

                        finally:
                            output_buffer.close()

                else:
                    st.info("No Python code detected in the response.")

            else:
                st.error(f"Error: {response.status_code}")
                st.write(response.text)

        except Exception as e:
            st.error("An error occurred while connecting to the API.")
            st.write(str(e))
    else:
        st.warning("Please enter a valid question.")
